Split 19 documents into 72 chunks. [Document(metadata={'source': 'aws-lambda-developer-guide/README.md', 'start_index': 0}, page_content='AWS Lambda Developer Guide\n\nThis repository contains additional resources for the AWS Lambda developer guide.\n\niam-policies - Sample permissions policies for cross-service use cases.\n\nsample-apps - Sample applications that demonstrate features and use cases for the AWS Lambda service and managed runtimes.\n\ntemplates - AWS CloudFormation templates for creating functions and VPC network resources.\n\nLicense Summary\n\nThe sample code within this repo is made available under a modified MIT license. See the LICENSE file.'), Document(metadata={'source': 'aws-lambda-developer-guide/CONTRIBUTING.md', 'start_index': 0}, page_content="Contributing Guidelines\n\nThank you for your interest in contributing to our project. We greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.\n\nReporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\nA reproducible test case or series of steps\n\nThe version of our code being used\n\nAny modifications you've made relevant to the bug\n\nAnything unusual about your environment or deployment\n\nContributing via Pull Requests"), Document(metadata={'source': 'aws-lambda-developer-guide/CONTRIBUTING.md', 'start_index': 823}, page_content="Anything unusual about your environment or deployment\n\nContributing via Pull Requests\n\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\nYou are working against the latest source on the main branch.\n\nYou check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n\nYou open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\nFork the repository.\n\nModify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n\nEnsure local tests pass.\n\nCommit to your fork using clear commit messages.\n\nSend us a pull request, answering any default questions in the pull request interface.\n\nPay attention to any automated CI failures reported in the pull request, and stay involved in the conversation."), Document(metadata={'source': 'aws-lambda-developer-guide/CONTRIBUTING.md', 'start_index': 1798}, page_content="GitHub provides additional document on forking a repository and creating a pull request.\n\nFinding contributions to work on\n\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\nCode of Conduct\n\nThis project has adopted the Amazon Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.\n\nSecurity issue notifications\n\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page. Please do not create a public github issue.\n\nLicensing\n\nSee the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution."), Document(metadata={'source': 'aws-lambda-developer-guide/CONTRIBUTING.md', 'start_index': 2761}, page_content='We may ask you to sign a Contributor License Agreement (CLA) for larger changes.'), Document(metadata={'source': 'aws-lambda-developer-guide/iam-policies/README.md', 'start_index': 0}, page_content="Lambda console IAM policy examples\n\nThe documents in this folder show AWS Identity and Access Management (IAM) policies related to the AWS Lambda console. They show permissions that you need to use the Lambda console, and permissions that the console can add to your function's execution role.\n\nConsole Use Policies\n\nThese policies show the user permissions required to configure triggers in the Lambda console.\n\nconsole-apigateway.json\n\nconsole-cloudwatchevents.json\n\nconsole-cloudwatchlogs.json\n\nconsole-cognito.json\n\nconsole-dynamodb.json\n\nconsole-iot.json\n\nconsole-kinesis.json\n\nconsole-s3.json\n\nconsole-sns.json\n\nExecution Role Templates\n\nThese policies show the permissions that the Lambda console adds to your function's execution role when you create a new role from a template.\n\ntemplate-atedge.json\n\ntemplate-basic.json\n\ntemplate-dlq-sns.json\n\ntemplate-dlq-sqs.json\n\ntemplate-dynamodb.json\n\ntemplate-kinesis.json\n\ntemplate-vpcaccess.json\n\nBlueprint Policies"), Document(metadata={'source': 'aws-lambda-developer-guide/iam-policies/README.md', 'start_index': 877}, page_content="template-dynamodb.json\n\ntemplate-kinesis.json\n\ntemplate-vpcaccess.json\n\nBlueprint Policies\n\nThese policies show the permissions that the Lambda console adds to your function's execution role when you create a function from a blueprint.\n\nblueprint-cloudformation.json\n\nblueprint-ec2ami.json\n\nblueprint-elasticsearch.json\n\nblueprint-iotbutton.json\n\nblueprint-kmsdecrypt.json\n\nblueprint-microservice.json\n\nblueprint-rekognition-nodata.json\n\nblueprint-rekognition-readonly.json\n\nblueprint-rekognition-writeonly.json\n\nblueprint-s3get.json\n\nblueprint-sesbounce.json\n\nblueprint-sqspoller.json\n\nblueprint-testharness.json\n\nblueprint-vpnmonitor.json"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events-v1sdk/README.md', 'start_index': 0}, page_content="Basic function with event library types and the AWS SDK (Java)\n\nThis sample application shows the use of the aws-lambda-java-events library with event types that require AWS SDK as a dependency. A separate handler class is defined for each input type. For other event types (which don't require the AWS SDK), see the java-events sample.\n\nNote: The java-events-v1sdk examples are deprecated. As of version 3.0.0 of the aws-lambda-java-events package, users are no longer required to pull in SDK dependencies in order to use that library. Please see the java-events package for updated examples.\n\nThe project includes function code and supporting resources: - src/main - A Java function. - src/test - A unit test and helper classes. - template.yml - An AWS CloudFormation template that creates an application. - build.gradle - A Gradle build file. - pom.xml - A Maven build file. - 1-create-bucket.sh, 2-build-layer.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application."), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events-v1sdk/README.md', 'start_index': 999}, page_content="Use the following instructions to deploy the sample application.\n\nRequirements\n\nJava 8 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/java-events-v1sdk\n\nRun 1-create-bucket.sh to create a new bucket for deployment artifacts.\n\njava-events-v1sdk$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e4xmplb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\njava-events-v1sdk$ ./2-build-layer.sh\n\nDeploy"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events-v1sdk/README.md', 'start_index': 1907}, page_content='java-events-v1sdk$ ./2-build-layer.sh\n\nDeploy\n\nRun 3-deploy.sh to build the application with Gradle and deploy it.\n\njava-events-v1sdk$ ./3-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - java-events-v1sdk\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use maven, add mvn to the command.\n\njava-events-v1sdk$ ./3-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:java-events-v1sdk >-----------------------\n[INFO] Building java-events-v1sdk-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events-v1sdk/README.md', 'start_index': 2865}, page_content='Test\n\nRun 4-invoke.sh to invoke the function.\n\njava-events-v1sdk$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n"200 OK"\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nConfigure Handler Class\n\nBy default, the function uses a handler class named Handler that takes an Amazon S3 notification event as input and returns a string. The project also includes handlers that use other input and output types. The handlers are defined in the following files under src/main/java/example:\n\nHandler.java - Takes S3Event as input.\n\nHandlerDynamoDB.java - Takes DynamoDBEvent as input.\n\nHandlerKinesis.java - Takes KinesisEvent as input.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events-v1sdk/README.md', 'start_index': 3774}, page_content='HandlerKinesis.java - Takes KinesisEvent as input.\n\nTo use a different handler, change the value of the Handler setting in the application template (template.yml or template-mvn.yaml). For example, to use the Kinesis handler:\n\nProperties:\n  CodeUri: build/distributions/java-events-v1sdk.zip\n  Handler: example.HandlerKinesis\n\nDeploy the change, and then use the invoke script to test the new configuration. Pass the handler type key as an argument to the invoke script.\n\n./4-invoke.sh kin\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n"200 OK"\n\nThe following event type keys are supported: - none - S3 notification (events/s3-notification.json) - kin - Kinesis record (events/kinesis-record.json) - ddb - DynamoDB record (events/dynamodb-record.json)\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\njava-events-v1sdk$ ./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 0}, page_content='Blank function (Node.js)\n\nThis sample application is a Lambda function that calls the Lambda API. It shows the use of logging, environment variables, AWS X-Ray tracing, layers, unit tests and the AWS SDK. You can use it to learn about Lambda features or use it as a starting point for your own projects.\n\nThe project source includes function code and supporting resources:\n\nfunction - A Node.js function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nVariants of this sample application are available for the following languages:\n\nPython – blank-python.\n\nRuby – blank-ruby.\n\nJava – blank-java.\n\nGo – blank-go.\n\nC# – blank-csharp.\n\nPowerShell – blank-powershell.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 720}, page_content='Java – blank-java.\n\nGo – blank-go.\n\nC# – blank-csharp.\n\nPowerShell – blank-powershell.\n\nUse the following instructions to deploy the sample application. For an in-depth look at its architecture and features, see Blank Function Sample Application for AWS Lambda in the developer guide.\n\nRequirements\n\nNode.js 18 with npm\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-nodejs\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-nodejs$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 1501}, page_content="blank-nodejs$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\nblank-nodejs$ ./2-build-layer.sh\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\nblank-nodejs$ ./3-deploy.sh\nadded 16 packages from 18 contributors and audited 18 packages in 0.926s\nadded 17 packages from 19 contributors and audited 19 packages in 0.916s\nUploading to e678bc216e6a0d510d661ca9ae2fd941  2737254 / 2737254.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - blank-nodejs"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 2349}, page_content='This script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function, run 4-invoke.sh.\n\nblank-nodejs$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"AccountLimit":{"TotalCodeSize":80530636800,"CodeSizeUnzipped":262144000,"CodeSizeZipped":52428800,"ConcurrentExecutions":1000,"UnreservedConcurrentExecutions":933},"AccountUsage":{"TotalCodeSize":303678359,"FunctionCount":75}}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function calling Amazon S3.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 3191}, page_content='Choose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nFinally, view the application in the Lambda console.\n\nTo view the application 1. Open the applications page in the Lambda console. 2. Choose blank-nodejs.\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\nblank-nodejs$ ./5-cleanup.sh\nDeleted blank-nodejs stack.\nDelete deployment artifacts and bucket (lambda-artifacts-4475xmpl08ba7f8d)?y\ndelete: s3://lambda-artifacts-4475xmpl08ba7f8d/6f2edcce52085e31a4a5ba823dba2c9d\ndelete: s3://lambda-artifacts-4475xmpl08ba7f8d/3d3aee62473d249d039d2d7a37512db3\nremove_bucket: lambda-artifacts-4475xmpl08ba7f8d\nDelete function logs? (log group /aws/lambda/blank-nodejs-function-1RQTXMPLR0YSO)y'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-nodejs/README.md', 'start_index': 4005}, page_content="The cleanup script delete's the application stack, which includes the function and execution role, and local build artifacts. You can choose to delete the bucket and function logs as well."), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java17-examples/README.md', 'start_index': 0}, page_content='Basic function with minimal dependencies (Java)\n\nThe project source includes function code and supporting resources: - src/main - A Java function. - src/test - A unit test and helper classes. - template.yml - An AWS CloudFormation template that creates an application. - build.gradle - A Gradle build file. - pom.xml - A Maven build file. - 1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nJava 17 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/java17-examples'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java17-examples/README.md', 'start_index': 983}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\njava17-examples$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e4xmplb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.\n\njava17-examples$ ./2-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - java17-examples\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use maven, add mvn to the command.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java17-examples/README.md', 'start_index': 1651}, page_content='You can also build the application with Maven. To use maven, add mvn to the command.\n\njava17-examples$ ./2-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:java17-examples >-----------------------\n[INFO] Building java17-examples-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest\n\nTo invoke the function, run 3-invoke.sh.\n\njava17-examples$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n21\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nCleanup\n\nTo delete the application, run 4-cleanup.sh.\n\njava17-examples$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-java/README.md', 'start_index': 0}, page_content='Blank function (Java)\n\nThe project source includes function code and supporting resources:\n\nsrc/main - A Java function.\n\nsrc/test - A unit test and helper classes.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\nbuild.gradle - A Gradle build file.\n\npom.xml - A Maven build file.\n\n1-create-bucket.sh, 2-build-layer.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nAn AWS account.\n\nJava 8 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-java'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-java/README.md', 'start_index': 967}, page_content="To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-java$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\nblank-java$ ./2-build-layer.sh\n\nYou can also run this commnand with Maven. To use Maven, add mvn to the command.\n\nblank-java$ ./2-build-layer.sh mvn\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\nblank-java$ ./3-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - blank-java"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-java/README.md', 'start_index': 1754}, page_content='This script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use Maven, add mvn to the command.\n\njava-basic$ ./3-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:blank-java >-----------------------\n[INFO] Building blank-java-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest\n\nTo invoke the function, run 4-invoke.sh.\n\nblank-java$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-java/README.md', 'start_index': 2564}, page_content='The application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nFinally, view the application in the Lambda console.\n\nTo view the application 1. Open the applications page in the Lambda console. 2. Choose blank-java.\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\nblank$ ./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-python/README.md', 'start_index': 0}, page_content='Blank function (Python)\n\nThe project source includes function code and supporting resources:\n\nfunction - A Python function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-build-layer.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nPython 3.11. Sample also works with Python 3.9.\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\ngit clone https://github.com/awsdocs/aws-lambda-developer-guide.git\ncd aws-lambda-developer-guide/sample-apps/blank-python\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\n./1-create-bucket.sh\n\nExample output:\n\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-python/README.md', 'start_index': 905}, page_content="./1-create-bucket.sh\n\nExample output:\n\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\n./2-build-layer.sh\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\n./3-deploy.sh\n\nExample output:\n\nUploading to e678bc216e6a0d510d661ca9ae2fd941  9519118 / 9519118.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - blank-python\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function, run 4-invoke.sh.\n\n./4-invoke.sh"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-python/README.md', 'start_index': 1835}, page_content='Test\n\nTo invoke the function, run 4-invoke.sh.\n\n./4-invoke.sh\n\nExample output:\n\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"TotalCodeSize": 410713698, "FunctionCount": 45}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function calling Amazon S3.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\n./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/nodejs-apig/README.md', 'start_index': 0}, page_content="API Gateway proxy integration with Node.js\n\nThis sample application is a Lambda function that processes events from an API Gateway REST API. The API provides a public endpoint that you can access with a web browser or other HTTP client. When you send a request to the endpoint, the API serializes the request and sends it to the function. The function calls the Lambda API to get utilization data and returns it to the API in the required format.\n\n:warning: The application creates a public API endpoint that is accessible over the internet. When you're done testing, run the cleanup script to delete it.\n\nThe project source includes function code and supporting resources:\n\nfunction - A Node.js function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nNode.js 18 with npm"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/nodejs-apig/README.md', 'start_index': 963}, page_content='Requirements\n\nNode.js 18 with npm\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/nodejs-apig\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nnodejs-apig$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/nodejs-apig/README.md', 'start_index': 1539}, page_content='Deploy\n\nTo deploy the application, run 2-deploy.sh.\n\nnodejs-apig$ ./2-deploy.sh\nadded 16 packages from 18 contributors and audited 18 packages in 0.926s\nadded 17 packages from 19 contributors and audited 19 packages in 0.916s\nUploading to e678bc216e6a0d510d661ca9ae2fd941  2737254 / 2737254.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - nodejs-apig\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function directly with a test event (event.json), run 3-invoke.sh.\n\nnodejs-apig$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/nodejs-apig/README.md', 'start_index': 2460}, page_content='Let the script invoke the function a few times and then press CRTL+C to exit.\n\nTo invoke the function with the REST API, run the 4-get.sh script. This script uses cURL to send a GET request to the API endpoint.\n\nnodejs-apig$ ./4-get.sh\n> GET /api/ HTTP/1.1\n> Host: mf2fxmplbj.execute-api.us-east-2.amazonaws.com\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n< Content-Length: 55\n< Connection: keep-alive\n< x-amzn-RequestId: cb863771-xmpl-47cb-869e-3433209223a8\n< X-Custom-Header: My value\n< X-Custom-Header: My other value\n< X-Amzn-Trace-Id: Root=1-5e67ea83-4826xmpl9be7bf422bf70049\n...\n{\n  "TotalCodeSize": 184440616,\n  "FunctionCount": 39\n}\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function invoked in two ways.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/nodejs-apig/README.md', 'start_index': 3290}, page_content='Choose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nFinally, view the application in the Lambda console.\n\nTo view the application 1. Open the applications page in the Lambda console. 2. Choose nodejs-apig.\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\nnodejs-apig$ ./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-powershell/README.md', 'start_index': 0}, page_content='Blank function (PowerShell)\n\nThe project source includes function code and supporting resources:\n\nfunction - A PowerShell function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nPowerShell 7.0\n\n.NET Core 3.1\n\nAWSLambdaPSCore module 2.0\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-powershell\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-powershell/README.md', 'start_index': 852}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-powershell$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.\n\nblank-powershell$ ./2-deploy.sh\nRestoring .NET Lambda deployment tool\nInitiate packaging\nUploading to e678bc216e6a0d510d661ca9ae2fd941  28800329 / 28800329.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - blank-powershell\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function, run 3-invoke.sh.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-powershell/README.md', 'start_index': 1681}, page_content='Test\n\nTo invoke the function, run 3-invoke.sh.\n\nblank-powershell$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{\n  "AccountUsage": {\n    "FunctionCount": 44,\n    "TotalCodeSize": 391675850\n  }\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function calling Amazon S3.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run 4-cleanup.sh.\n\nblank-powershell$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/s3-java/README.md', 'start_index': 0}, page_content='S3 image resizer (Java)\n\nThe project source includes function code and supporting resources:\n\nsrc/main - A Java Lambda function that scales down an image stored in S3.\n\nsrc/test - A unit test and helper classes.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\nbuild.gradle - A Gradle build file.\n\npom.xml - A Maven build file.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nJava 21 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/s3-java'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/s3-java/README.md', 'start_index': 991}, page_content="To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\ns3-java$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\ns3-java$ ./2-build-layer.sh\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\ns3-java$ ./3-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - s3-java\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use maven, add mvn to the command."), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/s3-java/README.md', 'start_index': 1882}, page_content='You can also build the application with Maven. To use maven, add mvn to the command.\n\njava-basic$ ./3-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:s3-java >-----------------------\n[INFO] Building s3-java-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest\n\nThis Lambda function takes an image that\'s currently stored in S3, and scales it down into a thumbnail-sized image. To upload an image file to the application bucket, run 4-upload.sh.\n\ns3-java$ ./4-upload.sh\n\nIn your s3-java-bucket-<random_uuid> bucket that was created in step 3, you should now see a key inbound/sample-s3-java.png file, which represents the original image.\n\nTo invoke the function directly, run 5-invoke.sh.\n\ns3-java$ ./5-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/s3-java/README.md', 'start_index': 2756}, page_content='Let the script invoke the function a few times and then press CRTL+C to exit.\n\nIf you look at the s3-java-bucket-<random_uuid> bucket in your account, you should now see a key resized-inbound/sample-s3-java.png file, which represents the new, shrunken image.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run 6-cleanup.sh.\n\nblank$ ./6-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp/README.md', 'start_index': 0}, page_content="Blank function (C#)\n\nThe project source includes function code and supporting resources:\n\nsrc/blank-csharp - A C# .NET Core function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application. For more information on the application's architecture and implementation, see Managing Spot Instance Requests in the developer guide.\n\nRequirements\n\n.NET Core SDK 8.0\n\nAWS extensions for .NET CLI\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-csharp"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp/README.md', 'start_index': 974}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-csharp$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.\n\nblank-csharp$ ./2-deploy.sh\nAmazon Lambda Tools for .NET Core applications (4.0.0)\nExecuting publish command\nUploading to e678bc216e6a0d510d661ca9ae2fd941  1009985 / 1009985.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - blank-csharp\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTo invoke the function, run 3-invoke.sh.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp/README.md', 'start_index': 1813}, page_content='To invoke the function, run 3-invoke.sh.\n\nblank-csharp$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"FunctionCount":43,"TotalCodeSize":362867335}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function managing spot instances in Amazon EC2.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run the cleanup script.\n\nblank-csharp$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-go/README.md', 'start_index': 0}, page_content='Blank function (Go)\n\nThe project source includes function code and supporting resources:\n\nfunction - A Golang function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nGo executable.\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-go\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-go$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-go/README.md', 'start_index': 942}, page_content='Deploy\n\nTo deploy the application, run 2-deploy.sh.\n\nblank-go$ ./2-deploy.sh\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - blank-go\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function, run 3-invoke.sh.\n\nblank-go$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n"{\\"FunctionCount\\":42,\\"TotalCodeSize\\":361861771}"\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-go/README.md', 'start_index': 1678}, page_content='The application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run 4-cleanup.sh.\n\nblank$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 0}, page_content='Basic function with event library types (Java)\n\nThis sample application shows the use of the aws-lambda-java-events library with various event types. To keep the deployment size minimal, it includes only types that can be used without adding the AWS SDK as a dependency. A separate handler class is defined for each input type.\n\nNote: To use these examples, you must be using version 3.0.0 or newer of the aws-lambda-java-events dependency. If you are on an older version, see the java-events-v1sdk package for deprecated examples. If possible, update your aws-lambda-java-events dependency to version 3.0.0 or newer.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 619}, page_content='The project includes function code and supporting resources: - src/main - A Java function. - src/test - A unit test and helper classes. - template.yml - An AWS CloudFormation template that creates an application. - build.gradle - A Gradle build file. - pom.xml - A Maven build file. - 1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nJava 8 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/java-events\n\nRun 1-create-bucket.sh to create a new bucket for deployment artifacts.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 1541}, page_content='Run 1-create-bucket.sh to create a new bucket for deployment artifacts.\n\njava-events$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e4xmplb5b22e0d\n\nDeploy\n\nRun 2-deploy.sh to build the application with Gradle and deploy it.\n\njava-events$ ./2-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - java-events\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use maven, add mvn to the command.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 2220}, page_content='You can also build the application with Maven. To use maven, add mvn to the command.\n\njava-events$ ./2-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:java-events >-----------------------\n[INFO] Building java-events-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest\n\nRun 3-invoke.sh to invoke the function. The default handler (Handler.java) processes an event from an Amazon API Gateway HTTP API and returns a JSON representation of an HTTP response.\n\njava-events$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"isBase64Encoded":false,"statusCode":200,"headers":{"Content-Type":"text/html"},"body":"<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body><h1>Welcome</h1><p>Page generated by a Lambda function.</p></body></html>"}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 3102}, page_content='Let the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nConfigure Handler Class\n\nBy default, the function uses a handler class named Handler that takes an API Gateway proxy event as input and returns a string. The project also includes handlers that use other input and output types. The handlers are defined in the following files under src/main/java/example:\n\nHandler.java - Takes APIGatewayV2ProxyRequestEvent as input and returns APIGatewayV2ProxyResponseEvent.\n\nHandlerApiGateway.java - Takes APIGatewayProxyRequestEvent as input and returns APIGatewayProxyResponseEvent.\n\nHandlerCloudFront.java - Takes CloudFrontEvent as input.\n\nHandlerCodeCommit.java - Takes CodeCommitEvent as input.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 4036}, page_content='HandlerCodeCommit.java - Takes CodeCommitEvent as input.\n\nHandlerCognito.java - Takes CognitoEvent as input.\n\nHandlerCWEvents.java - Takes ScheduledEventEvent as input.\n\nHandlerCWLogs.java - Takes CloudWatchLogsEvent as input.\n\nHandlerDynamoDB.java - Takes DynamodbEvent as input.\n\nHandlerFirehose.java - Takes KinesisFirehoseEvent as input.\n\nHandlerKinesis.java - Takes KinesisEvent as input.\n\nHandlerLex.java - Takes LexEvent as input.\n\nHandlerS3.java - Takes S3Event as input.\n\nHandlerSNS.java - Takes SNSEvent as input.\n\nHandlerSQS.java - Takes SQSEvent as input.\n\nTo use a different handler, change the value of the Handler setting in the application template (template.yml or template-mvn.yaml). For example, to use the Amazon Lex handler:\n\nProperties:\n  CodeUri: build/distributions/java-events.zip\n  Handler: example.HandlerLex\n\nDeploy the change, and then use the invoke script to test the new configuration. Pass the handler type key as an argument to the invoke script.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-events/README.md', 'start_index': 5018}, page_content='./3-invoke.sh lex\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n"200 OK"\n\nThe following event type keys are supported: - none - API Gateway HTTP API (events/apigateway-v2.json) - apig - API Gateway REST API (events/apigateway-v1.json) - cws - CloudWatch scheduled event (events/cloudwatch-scheduled.json) - cwl - CloudWatch Logs (events/cloudwatch-logs.json) - sns - SNS notification (events/sns-notification.json) - cfg - Config rule (events/config-rule.json) - cc - CodeCommit push (events/codecommit-push.json) - cog - Cognito Sync (events/cognito-sync.json) - kin - Kinesis record (events/kinesis-record.json) - fh - Kinesis Firehose record (events/firehose-record.json) - lex - Lex dialog (events/lex-flowers.json) - ddb - DynamoDB record (events/dynamodb-record.json) - s3 - S3Event record (events/s3-notification.json) - sqs - SQSEvent record (events/sqs-record.json)\n\nCleanup\n\nTo delete the application, run 4-cleanup.sh.\n\njava-events$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/efs-nodejs/README.md', 'start_index': 0}, page_content='Using Amazon EFS for file storage\n\nThis application demonstrates the use of Amazon EFS with AWS Lambda. You can use Amazon EFS to create file systems that provide shared storage to Lambda functions and other compute resources. Your functions mount a folder in the file system to a local directory with the NFS protocol. The sample application creates a VPC network, file system, function, and supporting resources with AWS CloudFormation.\n\nThe function takes a event with the following structure:\n\n{ "fileName": "test.bin", "fileSize": 1048576 }\n\nThe function creates a file of the specified size (1MB in this case) and then reads it into memory.\n\nThe project source includes function code and supporting resources:\n\ndbadmin - A Node.js function that reads and writes files.\n\nlib - A Lambda layer with the npm modules used by the application\'s function.\n\nevent.json - A JSON document that can be used to test the application\'s function.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/efs-nodejs/README.md', 'start_index': 855}, page_content="event.json - A JSON document that can be used to test the application's function.\n\ntemplate.yml - An AWS CloudFormation template that creates the application.\n\ntemplate-vpcefs.yml - A template that creates the VPC and Amazon EFS file system.\n\n1-create-bucket.sh, 2-deploy-vpc.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nTo deploy the sample application, you need the following tools:\n\nNode.js 18 with npm.\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nTo run the sample application in AWS, you need permission to use Lambda and the following services.\n\nAmazon EFS (pricing)\n\nAmazon VPC (pricing)\n\nAWS Identity and Access Management\n\nAWS CloudFormation\n\nStandard charges apply for each service.\n\nSetup"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/efs-nodejs/README.md', 'start_index': 1779}, page_content='AWS CloudFormation\n\nStandard charges apply for each service.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/efs-nodejs\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nefs-nodejs$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo create the VPC and EFS file system, run the 2-deploy-vpc.sh script.\n\nefs-nodejs$ ./2-deploy-vpc.sh\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\nefs-nodejs$ ./3-deploy.sh\nUploading to e678bc216e6a0d510d661ca9ae2fd941  2678 / 2678.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - efs-nodejs'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/efs-nodejs/README.md', 'start_index': 2625}, page_content='This script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function with a test event, use the invoke script.\n\nefs-nodejs$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"writeTimeMs":3.316225,"readTimeMs":166.129772,"fileSizeBytes":1398104}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nCleanup\n\nTo delete the application, run the cleanup script.\n\nefs-nodejs$ ./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp-with-layer/README.md', 'start_index': 0}, page_content="Blank function with layer (C#)\n\nThe project source includes function code and supporting resources:\n\nsrc/blank-csharp - A C# .NET Core function.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application. For more information on the application's architecture and implementation, see Managing Spot Instance Requests in the developer guide.\n\nRequirements\n\n.NET Core SDK 8.0\n\nAWS extensions for .NET CLI. Specifically, ensure that you have Amazon.Lambda.Tools installed.\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-csharp"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp-with-layer/README.md', 'start_index': 976}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket-and-role.sh.\n\nblank-csharp$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-d7aec9f2022ef2b4\nmake_bucket: lambda-artifacts-d7aec9f2022ef2b4-dotnet-layer\n{\n    "Role": {\n        "Path": "/",\n        "RoleName": "blank-csharp-role",\n        "RoleId": "AROA6HOIFXAKKWARP5RSC",\n        "Arn": "arn:aws:iam::978061735956:role/blank-csharp-role",\n        "CreateDate": "2023-08-22T18:12:29+00:00",\n        "AssumeRolePolicyDocument": {\n            "Version": "2012-10-17",\n            "Statement": [\n                {\n                    "Effect": "Allow",\n                    "Action": [\n                        "sts:AssumeRole"\n                    ],\n                    "Principal": {\n                        "Service": [\n                            "lambda.amazonaws.com"\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n}'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp-with-layer/README.md', 'start_index': 1917}, page_content='To build a Lambda layer that contains the function\'s runtime dependencies, run 2-build-layer.sh. This also uploads the layer to an S3 bucket created by the first script.\n\nblank-csharp$ ./2-build-layer.sh\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\nblank-csharp$ ./3-deploy.sh\nAmazon Lambda Tools for .NET Core applications (5.8.0)\n...\nCreated publish archive ...\nCreating new Lambda function blank-csharp\nNew Lambda function created\n\nThis script uses the .NET Amazon Lambda Tools to deploy the Lambda function. It uses the default settings from the src/aws-lambda-tools-defaults.json file.\n\nTo invoke the function, run 4-invoke.sh.\n\nblank-csharp$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n{"FunctionCount":13,"TotalCodeSize":598094248}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-csharp-with-layer/README.md', 'start_index': 2696}, page_content='Let the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function managing spot instances in Amazon EC2.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run the cleanup script.\n\nblank-csharp$ ./5-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-basic/README.md', 'start_index': 0}, page_content='Basic function with minimal dependencies (Java)\n\nThe project source includes function code and supporting resources: - src/main - A Java function. - src/test - A unit test and helper classes. - template.yml - An AWS CloudFormation template that creates an application. - build.gradle - A Gradle build file. - pom.xml - A Maven build file. - 1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nJava 8 runtime environment (SE JRE)\n\nGradle 5 or Maven 3\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/java-basic'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-basic/README.md', 'start_index': 977}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\njava-basic$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e4xmplb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.\n\njava-basic$ ./2-deploy.sh\nBUILD SUCCESSFUL in 1s\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nSuccessfully created/updated stack - java-basic\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nYou can also build the application with Maven. To use maven, add mvn to the command.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-basic/README.md', 'start_index': 1630}, page_content='You can also build the application with Maven. To use maven, add mvn to the command.\n\njava-basic$ ./2-deploy.sh mvn\n[INFO] Scanning for projects...\n[INFO] -----------------------< com.example:java-basic >-----------------------\n[INFO] Building java-basic-function 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n...\n\nTest\n\nTo invoke the function, run 3-invoke.sh.\n\njava-basic$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n"200 OK"\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nConfigure Handler Class'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-basic/README.md', 'start_index': 2490}, page_content='Configure Handler Class\n\nBy default, the function uses a handler class named Handler that takes a map as input and returns a string. The project also includes handlers that use other input and output types. These are defined in the following files under src/main/java/example:\n\nHandler.java – Takes a Map<String,String> as input.\n\nHandlerInteger.java – Takes an Integer as input.\n\nHandlerList.java – Takes a List<Integer> as input.\n\nHandlerDivide.java – Takes a List<Integer> with two integers as input.\n\nHandlerStream.java – Takes an InputStream and OutputStream as input.\n\nHandlerString.java – Takes a String as input.\n\nHandlerWeatherData.java – Takes a custom type as input.\n\nTo use a different handler, change the value of the Handler setting in the application template (template.yml or template-mvn.yaml). For example, to use the list handler:\n\nProperties:\n  CodeUri: build/distributions/java-basic.zip\n  Handler: example.HandlerList'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/java-basic/README.md', 'start_index': 3341}, page_content='Properties:\n  CodeUri: build/distributions/java-basic.zip\n  Handler: example.HandlerList\n\nDeploy the change, and then use the invoke script to test the new configuration. For handlers, that don\'t take a JSON object as input, pass the type (string, int, list, or divide) as an argument to the invoke script.\n\n./3-invoke.sh list\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n9979\n\nCleanup\n\nTo delete the application, run 4-cleanup.sh.\n\njava-basic$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/ec2-spot/README.md', 'start_index': 0}, page_content="EC2 spot instance function\n\nThe project source includes function code and supporting resources:\n\nsrc/ec2-spot - A C# .NET Core function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-deploy.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application. For more information on the application's architecture and implementation, see Managing Spot Instance Requests in the developer guide.\n\nRequirements\n\n.NET Core SDK 2.1\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/ec2-spot"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/ec2-spot/README.md', 'start_index': 944}, page_content='To create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nec2-spot$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nDeploy\n\nTo deploy the application, run 2-deploy.sh.\n\nec2-spot$ ./2-deploy.sh\nUploading to e678bc216e6a0d510d661ca9ae2fd941  2737254 / 2737254.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - ec2-spot\n\nThis script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTo invoke the function, run 3-invoke.sh.\n\nec2-spot$ ./3-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/ec2-spot/README.md', 'start_index': 1817}, page_content='Let the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function managing spot instances in Amazon EC2.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nFinally, view the application in the Lambda console.\n\nTo view the application 1. Open the applications page in the Lambda console. 2. Choose ec2-spot.\n\nCleanup\n\nTo delete the application, run the cleanup script.\n\nec2-spot$ ./4-cleanup.sh'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-ruby/README.md', 'start_index': 0}, page_content='Blank function (Ruby)\n\nThe project source includes function code and supporting resources:\n\nfunction - A Ruby function.\n\ntemplate.yml - An AWS CloudFormation template that creates an application.\n\n1-create-bucket.sh, 2-build-layer.sh, etc. - Shell scripts that use the AWS CLI to deploy and manage the application.\n\nUse the following instructions to deploy the sample application.\n\nRequirements\n\nRuby 2.5\n\nThe Bash shell. For Linux and macOS, this is included by default. In Windows 10, you can install the Windows Subsystem for Linux to get a Windows-integrated version of Ubuntu and Bash.\n\nThe AWS CLI v1.17 or newer.\n\nSetup\n\nDownload or clone this repository.\n\n$ git clone https://github.com/awsdocs/aws-lambda-developer-guide.git\n$ cd aws-lambda-developer-guide/sample-apps/blank-ruby\n\nTo create a new bucket for deployment artifacts, run 1-create-bucket.sh.\n\nblank-ruby$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d'), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-ruby/README.md', 'start_index': 864}, page_content="blank-ruby$ ./1-create-bucket.sh\nmake_bucket: lambda-artifacts-a5e491dbb5b22e0d\n\nTo build a Lambda layer that contains the function's runtime dependencies, run 2-build-layer.sh. The script installs Bundler and uses it to install the application's libraries in a folder named lib.\n\nblank-ruby$ ./2-build-layer.sh\n\nThe lib folder is used to create a Lambda layer during deployment. Packaging dependencies in a layer reduces the size of the deployment package that you upload when you modify your code.\n\nDeploy\n\nTo deploy the application, run 3-deploy.sh.\n\nblank-ruby$ ./3-deploy.sh\nUploading to e678bc216e6a0d510d661ca9ae2fd941  2737254 / 2737254.0  (100.00%)\nSuccessfully packaged artifacts and wrote output template to file out.yml.\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - blank-ruby"), Document(metadata={'source': 'aws-lambda-developer-guide/sample-apps/blank-ruby/README.md', 'start_index': 1728}, page_content='This script uses AWS CloudFormation to deploy the Lambda functions and an IAM role. If the AWS CloudFormation stack that contains the resources already exists, the script updates it with any changes to the template or function code.\n\nTest\n\nTo invoke the function, run 4-invoke.sh.\n\nblank-ruby$ ./4-invoke.sh\n{\n    "StatusCode": 200,\n    "ExecutedVersion": "$LATEST"\n}\n\nLet the script invoke the function a few times and then press CRTL+C to exit.\n\nThe application uses AWS X-Ray to trace requests. Open the X-Ray console to view the service map. The following service map shows the function calling Amazon S3.\n\nChoose a node in the main function graph. Then choose View traces to see a list of traces. Choose any trace to view a timeline that breaks down the work done by the function.\n\nCleanup\n\nTo delete the application, run 5-cleanup.sh.\n\nblank-ruby$ ./5-cleanup.sh')]